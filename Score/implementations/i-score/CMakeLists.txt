cmake_minimum_required(VERSION 3.0)

set(CMAKE_INSTALL_PREFIX /usr/local) # won't work on windows
set(CMAKE_PREFIX_PATH /usr/share/cmake/Jamoma;/usr/local/jamoma/share/cmake/Jamoma;)
project (iscoreCommandLine)

find_package(Jamoma 0.6 REQUIRED)

set(CMAKE_CXX_FLAGS "-std=c++11")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH True)


add_executable(i-score-nogui "${CMAKE_CURRENT_SOURCE_DIR}/main.cpp")
target_link_libraries(i-score-nogui Jamoma::Foundation Jamoma::Modular Jamoma::Score)
set_target_properties(i-score-nogui PROPERTIES VERSION 3)


#~ find_package(Qt5 5.2 REQUIRED COMPONENTS Core Widgets)
#~ set(JAMOMA_LIBS "Score;Modular;Foundation;DSP")
#~ set(JAMOMA_PLUGINS "MIDI;Minuit;OSC;Automation;Scenario;Interval;Loop;AnalysisLib;DataspaceLib;FunctionLib;System;NetworkLib")

#~ target_link_libraries(i-score-nogui Qt5::Core Qt5::Widgets Jamoma::Foundation Jamoma::Modular Jamoma::Score pthread)

#~ add_executable(${APPNAME} WIN32 MACOSX_BUNDLE main.cpp)
#~ 
#~ install(TARGETS ${APPNAME}
		#~ BUNDLE DESTINATION .
		#~ RUNTIME DESTINATION bin
		#~ COMPONENT Runtime)
#~ 
#~ if(APPLE)
	#~ # Copy the Jamoma files in the bundle generated by the build phase
	#~ copy_in_bundle_jamoma(${APPNAME} ${CMAKE_BINARY_DIR}/${APPNAME}.app "${JAMOMA_LIBS}" "${JAMOMA_PLUGINS}")
#~ 
	#~ # Remember to set CMAKE_INSTALL_PREFIX on the CMake command line.
	#~ # Qt setup
	#~ include(DeployQt5)
	#~ # We don't put the Jamoma path in here, because the paths get perverted by DeployQt5.
	#~ install_qt5_executable(${APPNAME}.app "" "" "")
#~ 
	#~ # After installation and fix-up by DeployQt5, we import the Jamoma libraries.
	#~ # They are put in the RPATH.
	#~ fixup_bundle_jamoma(${CMAKE_INSTALL_PREFIX}/${APPNAME}.app ${APPNAME} "${JAMOMA_LIBS}")
#~ elseif(ANDROID)
#~ 
	#~ include(${CMAKE_CURRENT_SOURCE_DIR}/CMake/Android/qt-android-cmake/AddQtAndroidApk.cmake)
	#~ add_qt_android_apk(iscore_apk i-score-nogui
					   #~ PACKAGE_NAME "net.iscore-nogui"
					   #~ INSTALL)
#~ endif()
